/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.avokin.ideaLogViewer.lang.lexer;


import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.Stack;

import com.intellij.psi.TokenType;

import static com.avokin.ideaLogViewer.lang.psi.IdeaLogViewerTokenTypes.*;

/**
 * The IdeaLogViewer lexer
 *
 * @author Andrey Vokin
 */

public class _IdeaLogLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int YY_CLASS_NAME = 2;
  public static final int YY_AFTER_CLASS_NAME = 4;
  public static final int YY_LOG_RECORD = 6;
  public static final int YY_UPTIME = 8;
  public static final int YY_TEXT_UNTIL_END_OF_LINE = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 4160 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\15\5\1\7\1\10\11\5\1\11\1\12\1\5\1\13\1\14\11"+
    "\5\1\15\14\5\1\16\2\5\1\17\u01e2\5");

  /* The ZZ_CMAP_Y table has 1024 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\2\3\1\4\55\3\1\5\3\3\1\6\6\3\1\5\14\3\1\7\3\3\1\7\3\3\1\7\3\3"+
    "\1\7\3\3\1\7\3\3\1\7\3\3\1\7\3\3\1\7\3\3\1\7\3\3\1\7\2\3\1\6\3\3\1\6\2\3\1"+
    "\5\10\3\1\5\1\3\1\6\57\3\1\4\12\3\1\5\1\10\11\3\1\7\3\3\1\6\5\3\1\11\5\3\1"+
    "\6\2\3\1\6\4\3\1\11\35\3\1\12\1\13\1\14\175\3\1\4\160\3\1\5\24\3\1\6\1\3\1"+
    "\5\5\3\2\6\2\3\1\6\14\3\1\6\130\3\1\6\54\3\1\5\35\3\1\7\3\3\1\6\1\3\1\15\4"+
    "\3\1\6\10\3\1\6\12\3\1\6\3\3\1\6\13\3\1\6\3\3\1\5\2\3\1\6\15\3\1\5\32\3\1"+
    "\6\60\3\1\5\6\3\1\6\143\3\1\16\1\17\12\3\1\6\65\3");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\7\1\10\3\1\22\0\1\4\13\0\1\6\1\3\2\0\12\2\1\5\6\0\1\25\1\15\1\0\1"+
    "\13\1\14\1\22\1\17\1\0\1\20\4\0\1\21\1\23\2\0\1\26\2\0\1\16\1\0\1\24\3\0\1"+
    "\11\1\0\1\12\42\0\1\1\37\0\12\2\46\0\12\2\14\0\12\2\36\0\1\1\1\0\12\2\6\0"+
    "\12\2\6\0\12\2\6\0\14\1\34\0\2\1\5\0\1\1\57\0\1\1\26\0\12\2\16\0\62\2");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\2\1\1\2\1\3\1\1\1\4\1\5\2\2"+
    "\4\1\1\6\1\2\1\7\1\10\2\11\10\0\1\12"+
    "\1\0\1\13\1\14\7\0\1\15\1\16\1\0\1\17"+
    "\1\20\21\0\1\21";

  private static int [] zzUnpackAction() {
    int [] result = new int[67];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\27\0\56\0\105\0\134\0\163\0\212\0\241"+
    "\0\212\0\270\0\317\0\346\0\212\0\375\0\u0114\0\u012b"+
    "\0\u0142\0\u0159\0\u0170\0\u0187\0\u019e\0\212\0\212\0\u01b5"+
    "\0\212\0\u01cc\0\u01e3\0\u01fa\0\u0211\0\u0228\0\u023f\0\u0256"+
    "\0\u01b5\0\212\0\u026d\0\212\0\u01fa\0\u0284\0\u029b\0\u02b2"+
    "\0\u02c9\0\u02e0\0\u02f7\0\u030e\0\212\0\212\0\u0325\0\212"+
    "\0\212\0\u033c\0\u0353\0\u036a\0\u0381\0\u0398\0\u03af\0\u03c6"+
    "\0\u03dd\0\u03f4\0\u040b\0\u0422\0\u0439\0\u0450\0\u0467\0\u047e"+
    "\0\u0495\0\u04ac\0\212";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[67];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\7\1\10\5\7\1\11\16\7\3\12\1\7\1\13"+
    "\2\12\2\7\16\12\10\14\1\15\16\14\1\7\1\16"+
    "\2\7\1\17\2\7\2\16\2\7\1\20\1\21\3\7"+
    "\1\22\3\7\1\23\3\7\1\16\1\24\1\7\1\25"+
    "\2\7\1\25\1\16\1\26\1\27\14\7\10\30\1\31"+
    "\16\30\31\0\1\32\24\0\3\12\2\0\2\12\2\0"+
    "\16\12\3\0\1\33\23\0\10\14\1\0\16\14\1\0"+
    "\1\16\2\0\1\16\2\0\2\16\17\0\1\16\1\0"+
    "\1\34\1\16\2\0\2\16\32\0\1\35\40\0\1\36"+
    "\21\0\1\37\32\0\1\40\3\0\1\24\25\0\1\16"+
    "\1\24\1\0\1\25\2\0\1\25\1\16\16\0\10\41"+
    "\1\42\16\41\2\0\1\43\30\0\1\44\26\0\1\45"+
    "\37\0\1\46\37\0\1\47\22\0\1\50\32\0\1\51"+
    "\2\0\1\52\42\0\1\53\33\0\1\54\26\0\1\55"+
    "\24\0\1\56\10\0\1\57\42\0\1\60\35\0\1\61"+
    "\2\0\1\62\26\0\1\63\1\64\26\0\1\64\25\0"+
    "\1\65\26\0\1\66\1\0\1\67\26\0\1\67\24\0"+
    "\1\70\26\0\1\71\2\0\1\72\26\0\1\72\23\0"+
    "\1\73\26\0\1\74\2\0\1\75\26\0\1\75\23\0"+
    "\1\76\26\0\1\77\3\0\1\100\26\0\1\100\22\0"+
    "\1\101\26\0\1\102\26\0\1\103\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1219];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\1\1\1\11\3\1\1\11\10\1\2\11"+
    "\1\1\1\11\10\0\1\11\1\0\1\11\1\1\7\0"+
    "\2\11\1\0\2\11\21\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[67];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private final Stack<Integer> stack = new Stack<Integer>();

  /**
   * Push the actual state on top of the stack
   */
  private void pushState() {
    stack.push(yystate());
  }

  /**
   * Push the actual state on top of the stack
   * and change into another state
   *
   * @param state The new state
   */
  private void pushStateAndBegin(int state) {
    stack.push(yystate());
    yybegin(state);
  }

  /**
   * Pop the last state from the stack and change to it.
   * If the stack is empty, go to YYINITIAL
   */
  private void popState() {
    if (!stack.empty()) {
      yybegin(stack.pop());
    } else {
      pushStateAndBegin(YYINITIAL);
    }
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _IdeaLogLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { stack.clear();
                                pushStateAndBegin(YY_TEXT_UNTIL_END_OF_LINE);
                                yypushback(yylength());
            } 
            // fall through
          case 18: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 19: break;
          case 3: 
            { return CLASS_NAME;
            } 
            // fall through
          case 20: break;
          case 4: 
            { return MESSAGE;
            } 
            // fall through
          case 21: break;
          case 5: 
            { stack.clear();
                                pushStateAndBegin(YYINITIAL);
                                return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 22: break;
          case 6: 
            { return UPTIME;
            } 
            // fall through
          case 23: break;
          case 7: 
            { return BRACKET_START;
            } 
            // fall through
          case 24: break;
          case 8: 
            { pushStateAndBegin(YY_LOG_RECORD);
                                return BRACKET_END;
            } 
            // fall through
          case 25: break;
          case 9: 
            { return TEXT;
            } 
            // fall through
          case 26: break;
          case 10: 
            { stack.clear();
                                pushStateAndBegin(YYINITIAL);
                                return TEXT;
            } 
            // fall through
          case 27: break;
          case 11: 
            { pushStateAndBegin(YY_AFTER_CLASS_NAME);
                                return TEXT;
            } 
            // fall through
          case 28: break;
          case 12: 
            { pushStateAndBegin(YY_CLASS_NAME);
                               return TEXT;
            } 
            // fall through
          case 29: break;
          case 13: 
            { return LOG_LEVEL_INFO;
            } 
            // fall through
          case 30: break;
          case 14: 
            { return LOG_LEVEL_WARN;
            } 
            // fall through
          case 31: break;
          case 15: 
            { return LOG_LEVEL_DEBUG;
            } 
            // fall through
          case 32: break;
          case 16: 
            { return LOG_LEVEL_ERROR;
            } 
            // fall through
          case 33: break;
          case 17: 
            { pushStateAndBegin(YY_UPTIME);
                                return TIME_STAMP;
            } 
            // fall through
          case 34: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

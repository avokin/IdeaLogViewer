/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.avokin.ideaLogViewer.lang.lexer;


import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.Stack;

import com.intellij.psi.TokenType;

import static com.avokin.ideaLogViewer.lang.psi.IdeaLogViewerTokenTypes.*;

/**
 * The IdeaLogViewer lexer
 *
 * @author Andrey Vokin
 */

public class _IdeaLogLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int YY_CLASS_NAME = 2;
  public static final int YY_AFTER_CLASS_NAME = 4;
  public static final int YY_LOG_RECORD = 6;
  public static final int YY_UPTIME = 8;
  public static final int YY_TEXT_UNTIL_END_OF_LINE = 10;
  public static final int YY_STACK_TRACE_LINE = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 4224 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\15\5\1\7\1\10\11\5\1\11\1\12\1\5\1\13\1\14\11"+
    "\5\1\15\14\5\1\16\2\5\1\17\u01e2\5");

  /* The ZZ_CMAP_Y table has 1024 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\55\4\1\6\3\4\1\7\6\4\1\6\14\4\1\10\3\4\1\10\3\4\1"+
    "\10\3\4\1\10\3\4\1\10\3\4\1\10\3\4\1\10\3\4\1\10\3\4\1\10\3\4\1\10\2\4\1\7"+
    "\3\4\1\7\2\4\1\6\10\4\1\6\1\4\1\7\57\4\1\5\12\4\1\6\1\11\11\4\1\10\3\4\1\7"+
    "\5\4\1\12\5\4\1\7\2\4\1\7\4\4\1\12\35\4\1\13\1\14\1\15\175\4\1\5\160\4\1\6"+
    "\24\4\1\7\1\4\1\6\5\4\2\7\2\4\1\7\14\4\1\7\130\4\1\7\54\4\1\6\35\4\1\10\3"+
    "\4\1\7\1\4\1\16\4\4\1\7\10\4\1\7\12\4\1\7\3\4\1\7\13\4\1\7\3\4\1\6\2\4\1\7"+
    "\15\4\1\6\32\4\1\7\60\4\1\6\6\4\1\7\143\4\1\17\1\20\12\4\1\7\65\4");

  /* The ZZ_CMAP_A table has 544 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\10\1\1\3\2\22\0\1\5\3\0\1\13\3\0\1\15\1\37\2\0\1\7\1\4\1\16\1\0\12"+
    "\14\1\6\1\0\1\13\1\0\1\13\2\0\1\52\1\44\1\16\1\42\1\43\1\47\1\45\1\16\1\46"+
    "\3\16\1\34\1\31\1\50\2\16\1\53\1\24\1\16\1\17\1\16\1\51\3\16\1\40\1\0\1\41"+
    "\1\0\1\16\1\0\1\11\1\16\1\27\1\36\1\30\2\16\1\35\1\32\1\16\1\21\2\16\1\20"+
    "\1\22\2\16\1\26\1\16\1\12\1\25\1\33\1\23\3\16\45\0\1\2\37\0\12\3\46\0\12\3"+
    "\14\0\12\3\36\0\1\2\1\0\12\3\6\0\12\3\6\0\12\3\6\0\14\2\34\0\2\2\5\0\1\2\57"+
    "\0\1\2\26\0\12\3\16\0\62\3");

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\1\1\3\1\1\1\4\1\5"+
    "\2\2\4\1\1\6\1\2\1\7\1\10\1\11\1\12"+
    "\1\11\2\1\7\0\1\11\4\0\1\13\1\14\4\0"+
    "\1\11\7\0\1\15\1\16\2\11\4\0\1\17\1\20"+
    "\1\11\4\0\1\11\1\21\4\0\3\11\3\0\3\11"+
    "\4\0\3\11\3\0\3\11\4\0\1\22\2\11\3\0"+
    "\2\11\4\0\2\11\3\0\2\11\4\0\2\11\3\0"+
    "\2\11\1\0\2\11\1\23\4\11";

  private static int [] zzUnpackAction() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0134\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0134\0\u0210\0\u023c"+
    "\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0134\0\u0134"+
    "\0\u0370\0\u0134\0\u039c\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478"+
    "\0\u04a4\0\u04d0\0\u04fc\0\u0528\0\u0554\0\u0580\0\u03f4\0\u05ac"+
    "\0\u05d8\0\u0134\0\u0478\0\u0604\0\u0630\0\u065c\0\u0688\0\u06b4"+
    "\0\u06e0\0\u070c\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8\0\u0134"+
    "\0\u0134\0\u0814\0\u0134\0\u0840\0\u086c\0\u0898\0\u08c4\0\u0134"+
    "\0\u0134\0\u08f0\0\u091c\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u0134"+
    "\0\u09f8\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c"+
    "\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c"+
    "\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0\0\u0dec"+
    "\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4\0\u0134\0\u0f20"+
    "\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028\0\u1054\0\u1080"+
    "\0\u10ac\0\u10d8\0\u1104\0\u1130\0\u115c\0\u1188\0\u11b4\0\u11e0"+
    "\0\u120c\0\u1238\0\u1264\0\u1290\0\u12bc\0\u12e8\0\u1314\0\u1340"+
    "\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c\0\u1448\0\u1474\0\u0134"+
    "\0\u14a0\0\u14cc\0\u14f8\0\u1524";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\10\1\12\10\10\1\12\37\10\1\13"+
    "\1\10\2\13\1\10\1\14\2\13\1\10\43\13\1\15"+
    "\1\16\52\15\1\10\2\17\2\10\1\20\2\10\1\17"+
    "\31\10\1\21\1\22\2\10\1\23\2\10\1\24\3\10"+
    "\2\17\1\25\1\10\1\26\2\10\1\26\3\10\1\25"+
    "\23\10\1\27\1\30\12\10\1\31\1\32\3\31\1\33"+
    "\2\31\1\33\43\31\5\10\1\34\2\10\1\34\4\35"+
    "\1\10\21\35\3\10\12\35\57\0\1\36\10\0\1\36"+
    "\37\0\1\13\1\0\2\13\2\0\2\13\1\0\43\13"+
    "\4\0\1\37\47\0\1\15\1\0\52\15\1\0\2\17"+
    "\2\0\1\17\2\0\1\17\44\0\2\17\1\0\1\40"+
    "\1\17\2\0\1\17\106\0\1\41\63\0\1\42\31\0"+
    "\1\43\74\0\1\44\4\0\1\25\10\0\1\25\40\0"+
    "\2\17\1\25\1\0\1\26\2\0\1\26\3\0\1\25"+
    "\37\0\1\31\1\0\53\31\1\0\7\31\1\45\42\31"+
    "\11\0\1\46\53\0\4\47\1\50\21\47\3\0\12\47"+
    "\3\0\1\51\10\0\1\51\44\0\1\52\53\0\1\53"+
    "\112\0\1\54\62\0\1\55\47\0\1\56\57\0\1\57"+
    "\1\31\1\0\10\31\1\60\41\31\12\0\1\61\52\0"+
    "\2\62\1\0\1\62\1\0\1\62\1\63\11\62\1\64"+
    "\5\62\3\0\12\62\3\0\1\65\10\0\1\65\56\0"+
    "\1\66\104\0\1\67\53\0\1\70\34\0\1\71\22\0"+
    "\1\31\1\0\3\31\1\72\2\31\1\72\43\31\5\0"+
    "\1\73\2\0\1\73\51\0\1\74\2\0\2\62\1\0"+
    "\1\62\1\0\21\62\3\0\12\62\6\0\1\74\2\0"+
    "\2\62\1\0\1\62\1\0\2\62\1\75\16\62\3\0"+
    "\12\62\6\0\1\74\2\0\1\76\1\62\1\0\1\62"+
    "\1\0\21\62\3\0\12\62\4\0\1\77\114\0\1\100"+
    "\61\0\1\101\1\31\1\0\7\31\4\102\1\31\21\102"+
    "\3\31\12\102\3\0\1\103\10\0\1\103\45\0\1\74"+
    "\2\0\2\62\1\0\1\62\1\0\3\62\1\104\15\62"+
    "\3\0\12\62\6\0\1\74\2\0\1\62\1\105\1\0"+
    "\1\62\1\0\21\62\3\0\12\62\3\0\1\106\10\0"+
    "\1\106\37\0\1\31\1\0\7\31\4\102\1\107\21\102"+
    "\3\31\12\102\3\0\1\103\10\0\1\103\22\0\1\110"+
    "\22\0\1\74\2\0\2\62\1\0\1\62\1\0\2\62"+
    "\1\111\16\62\3\0\12\62\6\0\1\74\2\0\2\62"+
    "\1\0\1\62\1\0\14\62\1\112\4\62\3\0\12\62"+
    "\3\0\1\113\1\114\7\0\1\113\37\0\1\31\1\0"+
    "\7\31\2\115\1\31\1\115\1\31\1\115\1\116\11\115"+
    "\1\117\5\115\3\31\12\115\6\0\1\74\2\0\2\62"+
    "\1\0\1\62\1\0\4\62\1\120\14\62\3\0\12\62"+
    "\6\0\1\74\2\0\2\62\1\0\1\62\1\0\15\62"+
    "\1\121\3\62\3\0\12\62\4\0\1\114\52\0\1\122"+
    "\10\0\1\122\37\0\1\31\1\0\4\31\1\123\2\31"+
    "\2\115\1\31\1\115\1\31\21\115\3\31\12\115\1\31"+
    "\1\0\4\31\1\123\2\31\2\115\1\31\1\115\1\31"+
    "\2\115\1\124\16\115\3\31\12\115\1\31\1\0\4\31"+
    "\1\123\2\31\1\125\1\115\1\31\1\115\1\31\21\115"+
    "\3\31\12\115\6\0\1\74\2\0\2\62\1\0\1\62"+
    "\1\0\5\62\1\126\13\62\3\0\12\62\6\0\1\74"+
    "\2\0\2\62\1\0\1\62\1\0\12\62\1\127\6\62"+
    "\3\0\12\62\3\0\1\130\1\0\1\131\6\0\1\130"+
    "\37\0\1\31\1\0\1\31\1\132\10\31\1\132\40\31"+
    "\1\0\4\31\1\123\2\31\2\115\1\31\1\115\1\31"+
    "\3\115\1\133\15\115\3\31\12\115\1\31\1\0\4\31"+
    "\1\123\2\31\1\115\1\134\1\31\1\115\1\31\21\115"+
    "\3\31\12\115\6\0\1\74\2\0\2\62\1\0\1\62"+
    "\1\0\2\62\1\135\16\62\3\0\12\62\5\0\1\136"+
    "\1\74\2\0\2\62\1\0\1\62\1\0\21\62\3\0"+
    "\12\62\5\0\1\131\51\0\1\137\10\0\1\137\37\0"+
    "\1\31\1\0\1\31\1\132\10\31\1\132\22\31\1\140"+
    "\15\31\1\0\4\31\1\123\2\31\2\115\1\31\1\115"+
    "\1\31\2\115\1\141\16\115\3\31\12\115\1\31\1\0"+
    "\4\31\1\123\2\31\2\115\1\31\1\115\1\31\14\115"+
    "\1\142\4\115\3\31\12\115\5\0\1\143\1\74\2\0"+
    "\2\62\1\0\1\62\1\0\21\62\3\0\12\62\34\0"+
    "\1\144\22\0\1\145\2\0\1\146\5\0\1\145\37\0"+
    "\1\31\1\147\53\31\1\0\4\31\1\123\2\31\2\115"+
    "\1\31\1\115\1\31\4\115\1\150\14\115\3\31\12\115"+
    "\1\31\1\0\4\31\1\123\2\31\2\115\1\31\1\115"+
    "\1\31\15\115\1\151\3\115\3\31\12\115\24\0\1\152"+
    "\57\0\1\153\31\0\1\146\50\0\1\154\10\0\1\154"+
    "\37\0\1\31\1\0\4\31\1\123\2\31\2\115\1\31"+
    "\1\115\1\31\5\115\1\155\13\115\3\31\12\115\1\31"+
    "\1\0\4\31\1\123\2\31\2\115\1\31\1\115\1\31"+
    "\12\115\1\156\6\115\3\31\12\115\22\0\1\157\43\0"+
    "\1\160\44\0\1\161\2\0\1\162\5\0\1\161\37\0"+
    "\1\31\1\0\4\31\1\123\2\31\2\115\1\31\1\115"+
    "\1\31\2\115\1\163\16\115\3\31\12\115\1\31\1\0"+
    "\3\31\1\164\1\123\2\31\2\115\1\31\1\115\1\31"+
    "\21\115\3\31\12\115\25\0\1\165\63\0\1\166\24\0"+
    "\1\162\50\0\1\167\10\0\1\167\37\0\1\31\1\0"+
    "\3\31\1\170\1\123\2\31\2\115\1\31\1\115\1\31"+
    "\21\115\3\31\12\115\1\31\1\0\32\31\1\171\17\31"+
    "\26\0\1\172\47\0\1\173\34\0\1\174\3\0\1\175"+
    "\4\0\1\174\37\0\1\31\1\0\22\31\1\176\30\31"+
    "\1\0\26\31\1\177\23\31\27\0\1\200\62\0\1\201"+
    "\24\0\1\175\47\0\1\202\10\0\1\202\37\0\1\31"+
    "\1\0\20\31\1\203\32\31\1\0\10\31\1\204\41\31"+
    "\30\0\1\201\62\0\1\110\17\0\1\205\10\0\1\205"+
    "\37\0\1\31\1\0\23\31\1\206\27\31\1\0\33\31"+
    "\1\207\16\31\3\0\1\210\10\0\1\210\37\0\1\31"+
    "\1\0\24\31\1\211\26\31\1\0\20\31\1\212\32\31"+
    "\1\0\25\31\1\213\25\31\1\0\34\31\1\214\16\31"+
    "\1\0\26\31\1\214\24\31\1\0\35\31\1\140\14\31";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5456];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\2\11\4\1\1\11\10\1\2\11\1\1\1\11"+
    "\3\1\7\0\1\1\4\0\1\11\1\1\4\0\1\1"+
    "\7\0\2\11\1\1\1\11\4\0\2\11\1\1\4\0"+
    "\1\1\1\11\4\0\3\1\3\0\3\1\4\0\3\1"+
    "\3\0\3\1\4\0\1\11\2\1\3\0\2\1\4\0"+
    "\2\1\3\0\2\1\4\0\2\1\3\0\2\1\1\0"+
    "\2\1\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private final Stack<Integer> stack = new Stack<Integer>();

  /**
   * Push the actual state on top of the stack
   */
  private void pushState() {
    stack.push(yystate());
  }

  /**
   * Push the actual state on top of the stack
   * and change into another state
   *
   * @param state The new state
   */
  private void pushStateAndBegin(int state) {
    stack.push(yystate());
    yybegin(state);
  }

  /**
   * Pop the last state from the stack and change to it.
   * If the stack is empty, go to YYINITIAL
   */
  private void popState() {
    if (!stack.empty()) {
      yybegin(stack.pop());
    } else {
      pushStateAndBegin(YYINITIAL);
    }
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _IdeaLogLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { stack.clear();
                                pushStateAndBegin(YY_TEXT_UNTIL_END_OF_LINE);
                                yypushback(yylength());
            } 
            // fall through
          case 20: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 21: break;
          case 3: 
            { return CLASS_NAME;
            } 
            // fall through
          case 22: break;
          case 4: 
            { return MESSAGE;
            } 
            // fall through
          case 23: break;
          case 5: 
            { stack.clear();
                                pushStateAndBegin(YYINITIAL);
                                return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 24: break;
          case 6: 
            { return UPTIME;
            } 
            // fall through
          case 25: break;
          case 7: 
            { return BRACKET_START;
            } 
            // fall through
          case 26: break;
          case 8: 
            { pushStateAndBegin(YY_LOG_RECORD);
                                return BRACKET_END;
            } 
            // fall through
          case 27: break;
          case 9: 
            { return TEXT;
            } 
            // fall through
          case 28: break;
          case 10: 
            { popState();
                                return TEXT;
            } 
            // fall through
          case 29: break;
          case 11: 
            { pushStateAndBegin(YY_AFTER_CLASS_NAME);
                                return TEXT;
            } 
            // fall through
          case 30: break;
          case 12: 
            { pushStateAndBegin(YY_CLASS_NAME);
                               return TEXT;
            } 
            // fall through
          case 31: break;
          case 13: 
            { return LOG_LEVEL_INFO;
            } 
            // fall through
          case 32: break;
          case 14: 
            { return LOG_LEVEL_WARN;
            } 
            // fall through
          case 33: break;
          case 15: 
            { return LOG_LEVEL_DEBUG;
            } 
            // fall through
          case 34: break;
          case 16: 
            { return LOG_LEVEL_ERROR;
            } 
            // fall through
          case 35: break;
          case 17: 
            { popState();
                                return CODE_REFERENCE;
            } 
            // fall through
          case 36: break;
          case 18: 
            { pushStateAndBegin(YY_STACK_TRACE_LINE);
                                yypushback(yylength());
            } 
            // fall through
          case 37: break;
          case 19: 
            { pushStateAndBegin(YY_UPTIME);
                                return TIME_STAMP;
            } 
            // fall through
          case 38: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
